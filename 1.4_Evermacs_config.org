** Fonctionnalités
*** Commandes
**** Evil Mode
 Configuration du système d'édition modal grâce à evil-mode.
#+BEGIN_SRC emacs-lisp
  (use-package evil
  :defer
  :init 
  (setq evil-want-keybinding nil)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1))

  ;; Redéfini le comportement de la touche <TAB>
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)

  ;; Étend l'édition modal encore plus
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

**** Marque-pages
Changement des raccourcis concernant les marque-pages
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x r q") 'bookmark-delete)
    (global-set-key (kbd "C-x r o") 'bookmark-jump-other-window)

    ;;Sauvegarde les marques-pages à chaque fois qu'ils sont modifiés 
    ;;(et pas à la fermeture d'Emacs)
    (setq bookmark-save-flag 1)
    #+END_SRC

*** Complétion
Ajout d'une extension pour la complétion globale (commande, fichier,...).
   #+BEGIN_SRC emacs-lisp
     (package-refresh-contents)
     (use-package ivy 
       :demand t
       :config
       (setq ivy-use-virtual-buffers t
	     ivy-count-format "%d/%d ")
       (ivy-mode 1)
       )
   #+END_SRC
   
*** Abréviations
Configuration du système d'abréviation intégré à Emacs.
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode t)
  (add-hook 'text-mode-hook #'abbrev-mode)

  ;; Initialisation de la sauvegarde des abréviations
  (setq abbrev-file-name "~/.emacs.d/.abbrev_defs")
  (setq save-abbrevs 'silently)
#+END_SRC

*** Correction linguistique
**** Hunspell
Utilise Hunspell pour mettre en place plusieurs dictionnaires.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "ispell"
    ;; Ajoute le chemin de l'exécutable dans la mémoire d'Emacs
    (add-to-list 'exec-path "~/.emacs.d/hunspell/bin/")
    (setq ispell-program-name (locate-file "hunspell"
					   exec-path exec-suffixes 'file-executable-p))

    ;; Utilisation du dictionnaire français et anglais britannique / américain
    (setq ispell-dictionary "fr-classic,en_GB,en_US")
    (ispell-set-spellchecker-params) ;;toujours avant ispell-hunspell-add-multi-dic
    (ispell-hunspell-add-multi-dic ispell-dictionary)
    )

  ;; Défini un dictionnaire personnel dans le fichier ".hunspell_personal"
  (setq ispell-personal-dictionary 
	(expand-file-name "~/.emacs.d/.hunspell_personal")
	)

  ;; Vérifie que le dictionnaire personnel existe, sinon en crée un nouveau
  (unless (file-exists-p ispell-personal-dictionary) 
    (write-region "" nil ispell-personal-dictionary nil 0))

  ;; Créer un raccourci pour la commande "ispell"
  (global-set-key (kbd "C-M-$") 'ispell)
#+END_SRC

Permet d'ignorer certaines région lors de l'utilisation du correcteur orthographique.
#+BEGIN_SRC emacs-lisp
  ;;lien hypertext
  (add-to-list 'ispell-skip-region-alist
    '("\\[\\[" . "\\]\\]"))
  ;;bloc de code
  (add-to-list 'ispell-skip-region-alist
    '("^\\#\\+BEGIN_SRC" . "^\\#\\+END_SRC"))
  ;;propriétées en début de fichier
  (add-to-list 'ispell-skip-region-alist
    '("^:PROPERTIES:" . "^:END:"))
#+END_SRC

**** Flyspell
Mise en place de Flyspell.
#+BEGIN_SRC emacs-lisp
  ;; Active Flyspell pour chaque fichier .org
  (add-hook 'org-mode-hook 'flyspell-mode)
  (setq flyspell-issue-message-flag nil)

  ;; Fonction : (dés)activation Flyspell
  (defun flyspell-toggle ()
    "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
    (interactive)
    (if (symbol-value flyspell-mode)
	(progn ;; flyspell is on, turn it off
	  (message "Flyspell off")
	  (flyspell-mode -1))
      (progn ;; else - flyspell is off, turn it on
	(message "Flyspell on")
	(flyspell-mode 1))))

  ;; Raccourci : bouton on/off pour Flyspell
  (global-set-key (kbd "C-c f") 'flyspell-toggle)

  ;; Modifie l'aspect du soulignage en forme de vague (au lieu d'un trait droit)
  (with-eval-after-load "flyspell"
    (setq flyspell-abbrev-p t)
    (set-face-underline 'flyspell-incorrect '(:color "#fb4933" :style wave)))

  ;; Utilise la complétion pour la correction
  (use-package flyspell-correct-ivy
    :after flyspell
    :bind (:map flyspell-mode-map
		("C-;" . flyspell-auto-correct-previous-word)
		("M-$" . flyspell-correct-at-point))
    )
#+END_SRC

*** Org Mode
**** Org Export
Modifie quelques paramètres d'exportation.
   #+BEGIN_SRC emacs-lisp
      ;; Permet d'exporter avec les lignes cassées
      (setq org-export-preserve-breaks t)

      ;; Ignore les URLs non valides 
      (setq org-export-with-broken-links t)

      ;; Changer la préférence d'exportation en docx (au lieu de odt)
      (setq org-odt-preferred-output-format "docx")
   #+END_SRC
   
